package com.nam.srv42.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.lar.StagedModelType;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import com.nam.srv42.model.Record;
import com.nam.srv42.model.RecordModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the Record service. Represents a row in the &quot;srvv_Record&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.nam.srv42.model.RecordModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link RecordImpl}.
 * </p>
 *
 * @author hp
 * @see RecordImpl
 * @see com.nam.srv42.model.Record
 * @see com.nam.srv42.model.RecordModel
 * @generated
 */
public class RecordModelImpl extends BaseModelImpl<Record>
    implements RecordModel {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. All methods that expect a record model instance should use the {@link com.nam.srv42.model.Record} interface instead.
     */
    public static final String TABLE_NAME = "srvv_Record";
    public static final Object[][] TABLE_COLUMNS = {
            { "uuid_", Types.VARCHAR },
            { "recordId", Types.BIGINT },
            { "groupId", Types.BIGINT },
            { "companyId", Types.BIGINT },
            { "userId", Types.BIGINT },
            { "userName", Types.VARCHAR },
            { "createDate", Types.TIMESTAMP },
            { "modifiedDate", Types.TIMESTAMP },
            { "name", Types.VARCHAR },
            { "date_", Types.TIMESTAMP },
            { "employer", Types.VARCHAR },
            { "salary", Types.INTEGER }
        };
    public static final String TABLE_SQL_CREATE = "create table srvv_Record (uuid_ VARCHAR(75) null,recordId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,name VARCHAR(200) null,date_ DATE null,employer VARCHAR(75) null,salary INTEGER)";
    public static final String TABLE_SQL_DROP = "drop table srvv_Record";
    public static final String ORDER_BY_JPQL = " ORDER BY record.recordId ASC";
    public static final String ORDER_BY_SQL = " ORDER BY srvv_Record.recordId ASC";
    public static final String DATA_SOURCE = "liferayDataSource";
    public static final String SESSION_FACTORY = "liferaySessionFactory";
    public static final String TX_MANAGER = "liferayTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.com.nam.srv42.model.Record"),
            false);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.com.nam.srv42.model.Record"),
            false);
    public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.column.bitmask.enabled.com.nam.srv42.model.Record"),
            true);
    public static long COMPANYID_COLUMN_BITMASK = 1L;
    public static long GROUPID_COLUMN_BITMASK = 2L;
    public static long UUID_COLUMN_BITMASK = 4L;
    public static long RECORDID_COLUMN_BITMASK = 8L;
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
                "lock.expiration.time.com.nam.srv42.model.Record"));
    private static ClassLoader _classLoader = Record.class.getClassLoader();
    private static Class<?>[] _escapedModelInterfaces = new Class[] { Record.class };
    private String _uuid;
    private String _originalUuid;
    private long _recordId;
    private long _groupId;
    private long _originalGroupId;
    private boolean _setOriginalGroupId;
    private long _companyId;
    private long _originalCompanyId;
    private boolean _setOriginalCompanyId;
    private long _userId;
    private String _userUuid;
    private String _userName;
    private Date _createDate;
    private Date _modifiedDate;
    private String _name;
    private Date _date;
    private String _employer;
    private int _salary;
    private long _columnBitmask;
    private Record _escapedModel;

    public RecordModelImpl() {
    }

    @Override
    public long getPrimaryKey() {
        return _recordId;
    }

    @Override
    public void setPrimaryKey(long primaryKey) {
        setRecordId(primaryKey);
    }

    @Override
    public Serializable getPrimaryKeyObj() {
        return _recordId;
    }

    @Override
    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey(((Long) primaryKeyObj).longValue());
    }

    @Override
    public Class<?> getModelClass() {
        return Record.class;
    }

    @Override
    public String getModelClassName() {
        return Record.class.getName();
    }

    @Override
    public Map<String, Object> getModelAttributes() {
        Map<String, Object> attributes = new HashMap<String, Object>();

        attributes.put("uuid", getUuid());
        attributes.put("recordId", getRecordId());
        attributes.put("groupId", getGroupId());
        attributes.put("companyId", getCompanyId());
        attributes.put("userId", getUserId());
        attributes.put("userName", getUserName());
        attributes.put("createDate", getCreateDate());
        attributes.put("modifiedDate", getModifiedDate());
        attributes.put("name", getName());
        attributes.put("date", getDate());
        attributes.put("employer", getEmployer());
        attributes.put("salary", getSalary());

        return attributes;
    }

    @Override
    public void setModelAttributes(Map<String, Object> attributes) {
        String uuid = (String) attributes.get("uuid");

        if (uuid != null) {
            setUuid(uuid);
        }

        Long recordId = (Long) attributes.get("recordId");

        if (recordId != null) {
            setRecordId(recordId);
        }

        Long groupId = (Long) attributes.get("groupId");

        if (groupId != null) {
            setGroupId(groupId);
        }

        Long companyId = (Long) attributes.get("companyId");

        if (companyId != null) {
            setCompanyId(companyId);
        }

        Long userId = (Long) attributes.get("userId");

        if (userId != null) {
            setUserId(userId);
        }

        String userName = (String) attributes.get("userName");

        if (userName != null) {
            setUserName(userName);
        }

        Date createDate = (Date) attributes.get("createDate");

        if (createDate != null) {
            setCreateDate(createDate);
        }

        Date modifiedDate = (Date) attributes.get("modifiedDate");

        if (modifiedDate != null) {
            setModifiedDate(modifiedDate);
        }

        String name = (String) attributes.get("name");

        if (name != null) {
            setName(name);
        }

        Date date = (Date) attributes.get("date");

        if (date != null) {
            setDate(date);
        }

        String employer = (String) attributes.get("employer");

        if (employer != null) {
            setEmployer(employer);
        }

        Integer salary = (Integer) attributes.get("salary");

        if (salary != null) {
            setSalary(salary);
        }
    }

    @Override
    public String getUuid() {
        if (_uuid == null) {
            return StringPool.BLANK;
        } else {
            return _uuid;
        }
    }

    @Override
    public void setUuid(String uuid) {
        if (_originalUuid == null) {
            _originalUuid = _uuid;
        }

        _uuid = uuid;
    }

    public String getOriginalUuid() {
        return GetterUtil.getString(_originalUuid);
    }

    @Override
    public long getRecordId() {
        return _recordId;
    }

    @Override
    public void setRecordId(long recordId) {
        _recordId = recordId;
    }

    @Override
    public long getGroupId() {
        return _groupId;
    }

    @Override
    public void setGroupId(long groupId) {
        _columnBitmask |= GROUPID_COLUMN_BITMASK;

        if (!_setOriginalGroupId) {
            _setOriginalGroupId = true;

            _originalGroupId = _groupId;
        }

        _groupId = groupId;
    }

    public long getOriginalGroupId() {
        return _originalGroupId;
    }

    @Override
    public long getCompanyId() {
        return _companyId;
    }

    @Override
    public void setCompanyId(long companyId) {
        _columnBitmask |= COMPANYID_COLUMN_BITMASK;

        if (!_setOriginalCompanyId) {
            _setOriginalCompanyId = true;

            _originalCompanyId = _companyId;
        }

        _companyId = companyId;
    }

    public long getOriginalCompanyId() {
        return _originalCompanyId;
    }

    @Override
    public long getUserId() {
        return _userId;
    }

    @Override
    public void setUserId(long userId) {
        _userId = userId;
    }

    @Override
    public String getUserUuid() throws SystemException {
        return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
    }

    @Override
    public void setUserUuid(String userUuid) {
        _userUuid = userUuid;
    }

    @Override
    public String getUserName() {
        if (_userName == null) {
            return StringPool.BLANK;
        } else {
            return _userName;
        }
    }

    @Override
    public void setUserName(String userName) {
        _userName = userName;
    }

    @Override
    public Date getCreateDate() {
        return _createDate;
    }

    @Override
    public void setCreateDate(Date createDate) {
        _createDate = createDate;
    }

    @Override
    public Date getModifiedDate() {
        return _modifiedDate;
    }

    @Override
    public void setModifiedDate(Date modifiedDate) {
        _modifiedDate = modifiedDate;
    }

    @Override
    public String getName() {
        if (_name == null) {
            return StringPool.BLANK;
        } else {
            return _name;
        }
    }

    @Override
    public void setName(String name) {
        _name = name;
    }

    @Override
    public Date getDate() {
        return _date;
    }

    @Override
    public void setDate(Date date) {
        _date = date;
    }

    @Override
    public String getEmployer() {
        if (_employer == null) {
            return StringPool.BLANK;
        } else {
            return _employer;
        }
    }

    @Override
    public void setEmployer(String employer) {
        _employer = employer;
    }

    @Override
    public int getSalary() {
        return _salary;
    }

    @Override
    public void setSalary(int salary) {
        _salary = salary;
    }

    @Override
    public StagedModelType getStagedModelType() {
        return new StagedModelType(PortalUtil.getClassNameId(
                Record.class.getName()));
    }

    public long getColumnBitmask() {
        return _columnBitmask;
    }

    @Override
    public ExpandoBridge getExpandoBridge() {
        return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
            Record.class.getName(), getPrimaryKey());
    }

    @Override
    public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
        ExpandoBridge expandoBridge = getExpandoBridge();

        expandoBridge.setAttributes(serviceContext);
    }

    @Override
    public Record toEscapedModel() {
        if (_escapedModel == null) {
            _escapedModel = (Record) ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelInterfaces, new AutoEscapeBeanHandler(this));
        }

        return _escapedModel;
    }

    @Override
    public Object clone() {
        RecordImpl recordImpl = new RecordImpl();

        recordImpl.setUuid(getUuid());
        recordImpl.setRecordId(getRecordId());
        recordImpl.setGroupId(getGroupId());
        recordImpl.setCompanyId(getCompanyId());
        recordImpl.setUserId(getUserId());
        recordImpl.setUserName(getUserName());
        recordImpl.setCreateDate(getCreateDate());
        recordImpl.setModifiedDate(getModifiedDate());
        recordImpl.setName(getName());
        recordImpl.setDate(getDate());
        recordImpl.setEmployer(getEmployer());
        recordImpl.setSalary(getSalary());

        recordImpl.resetOriginalValues();

        return recordImpl;
    }

    @Override
    public int compareTo(Record record) {
        long primaryKey = record.getPrimaryKey();

        if (getPrimaryKey() < primaryKey) {
            return -1;
        } else if (getPrimaryKey() > primaryKey) {
            return 1;
        } else {
            return 0;
        }
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }

        if (!(obj instanceof Record)) {
            return false;
        }

        Record record = (Record) obj;

        long primaryKey = record.getPrimaryKey();

        if (getPrimaryKey() == primaryKey) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return (int) getPrimaryKey();
    }

    @Override
    public void resetOriginalValues() {
        RecordModelImpl recordModelImpl = this;

        recordModelImpl._originalUuid = recordModelImpl._uuid;

        recordModelImpl._originalGroupId = recordModelImpl._groupId;

        recordModelImpl._setOriginalGroupId = false;

        recordModelImpl._originalCompanyId = recordModelImpl._companyId;

        recordModelImpl._setOriginalCompanyId = false;

        recordModelImpl._columnBitmask = 0;
    }

    @Override
    public CacheModel<Record> toCacheModel() {
        RecordCacheModel recordCacheModel = new RecordCacheModel();

        recordCacheModel.uuid = getUuid();

        String uuid = recordCacheModel.uuid;

        if ((uuid != null) && (uuid.length() == 0)) {
            recordCacheModel.uuid = null;
        }

        recordCacheModel.recordId = getRecordId();

        recordCacheModel.groupId = getGroupId();

        recordCacheModel.companyId = getCompanyId();

        recordCacheModel.userId = getUserId();

        recordCacheModel.userName = getUserName();

        String userName = recordCacheModel.userName;

        if ((userName != null) && (userName.length() == 0)) {
            recordCacheModel.userName = null;
        }

        Date createDate = getCreateDate();

        if (createDate != null) {
            recordCacheModel.createDate = createDate.getTime();
        } else {
            recordCacheModel.createDate = Long.MIN_VALUE;
        }

        Date modifiedDate = getModifiedDate();

        if (modifiedDate != null) {
            recordCacheModel.modifiedDate = modifiedDate.getTime();
        } else {
            recordCacheModel.modifiedDate = Long.MIN_VALUE;
        }

        recordCacheModel.name = getName();

        String name = recordCacheModel.name;

        if ((name != null) && (name.length() == 0)) {
            recordCacheModel.name = null;
        }

        Date date = getDate();

        if (date != null) {
            recordCacheModel.date = date.getTime();
        } else {
            recordCacheModel.date = Long.MIN_VALUE;
        }

        recordCacheModel.employer = getEmployer();

        String employer = recordCacheModel.employer;

        if ((employer != null) && (employer.length() == 0)) {
            recordCacheModel.employer = null;
        }

        recordCacheModel.salary = getSalary();

        return recordCacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(25);

        sb.append("{uuid=");
        sb.append(getUuid());
        sb.append(", recordId=");
        sb.append(getRecordId());
        sb.append(", groupId=");
        sb.append(getGroupId());
        sb.append(", companyId=");
        sb.append(getCompanyId());
        sb.append(", userId=");
        sb.append(getUserId());
        sb.append(", userName=");
        sb.append(getUserName());
        sb.append(", createDate=");
        sb.append(getCreateDate());
        sb.append(", modifiedDate=");
        sb.append(getModifiedDate());
        sb.append(", name=");
        sb.append(getName());
        sb.append(", date=");
        sb.append(getDate());
        sb.append(", employer=");
        sb.append(getEmployer());
        sb.append(", salary=");
        sb.append(getSalary());
        sb.append("}");

        return sb.toString();
    }

    @Override
    public String toXmlString() {
        StringBundler sb = new StringBundler(40);

        sb.append("<model><model-name>");
        sb.append("com.nam.srv42.model.Record");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>uuid</column-name><column-value><![CDATA[");
        sb.append(getUuid());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>recordId</column-name><column-value><![CDATA[");
        sb.append(getRecordId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>groupId</column-name><column-value><![CDATA[");
        sb.append(getGroupId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>companyId</column-name><column-value><![CDATA[");
        sb.append(getCompanyId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>userId</column-name><column-value><![CDATA[");
        sb.append(getUserId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>userName</column-name><column-value><![CDATA[");
        sb.append(getUserName());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>createDate</column-name><column-value><![CDATA[");
        sb.append(getCreateDate());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
        sb.append(getModifiedDate());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>name</column-name><column-value><![CDATA[");
        sb.append(getName());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>date</column-name><column-value><![CDATA[");
        sb.append(getDate());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>employer</column-name><column-value><![CDATA[");
        sb.append(getEmployer());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>salary</column-name><column-value><![CDATA[");
        sb.append(getSalary());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
