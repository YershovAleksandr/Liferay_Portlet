package com.nam.srv42.service.base;

import com.liferay.portal.kernel.bean.BeanReference;
import com.liferay.portal.kernel.bean.IdentifiableBean;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdate;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdateFactoryUtil;
import com.liferay.portal.kernel.dao.orm.DynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQueryFactoryUtil;
import com.liferay.portal.kernel.dao.orm.Projection;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.search.Indexable;
import com.liferay.portal.kernel.search.IndexableType;
import com.liferay.portal.kernel.util.OrderByComparator;
import com.liferay.portal.model.PersistedModel;
import com.liferay.portal.service.BaseLocalServiceImpl;
import com.liferay.portal.service.PersistedModelLocalServiceRegistryUtil;
import com.liferay.portal.service.persistence.UserPersistence;

import com.nam.srv42.model.Record;
import com.nam.srv42.service.RecordLocalService;
import com.nam.srv42.service.persistence.RecordPersistence;

import java.io.Serializable;

import java.util.List;

import javax.sql.DataSource;

/**
 * Provides the base implementation for the record local service.
 *
 * <p>
 * This implementation exists only as a container for the default service methods generated by ServiceBuilder. All custom service methods should be put in {@link com.nam.srv42.service.impl.RecordLocalServiceImpl}.
 * </p>
 *
 * @author hp
 * @see com.nam.srv42.service.impl.RecordLocalServiceImpl
 * @see com.nam.srv42.service.RecordLocalServiceUtil
 * @generated
 */
public abstract class RecordLocalServiceBaseImpl extends BaseLocalServiceImpl
    implements RecordLocalService, IdentifiableBean {
    @BeanReference(type = com.nam.srv42.service.RecordLocalService.class)
    protected com.nam.srv42.service.RecordLocalService recordLocalService;
    @BeanReference(type = RecordPersistence.class)
    protected RecordPersistence recordPersistence;
    @BeanReference(type = com.liferay.counter.service.CounterLocalService.class)
    protected com.liferay.counter.service.CounterLocalService counterLocalService;
    @BeanReference(type = com.liferay.portal.service.ResourceLocalService.class)
    protected com.liferay.portal.service.ResourceLocalService resourceLocalService;
    @BeanReference(type = com.liferay.portal.service.UserLocalService.class)
    protected com.liferay.portal.service.UserLocalService userLocalService;
    @BeanReference(type = com.liferay.portal.service.UserService.class)
    protected com.liferay.portal.service.UserService userService;
    @BeanReference(type = UserPersistence.class)
    protected UserPersistence userPersistence;
    private String _beanIdentifier;
    private ClassLoader _classLoader;
    private RecordLocalServiceClpInvoker _clpInvoker = new RecordLocalServiceClpInvoker();

    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. Always use {@link com.nam.srv42.service.RecordLocalServiceUtil} to access the record local service.
     */

    /**
     * Adds the record to the database. Also notifies the appropriate model listeners.
     *
     * @param record the record
     * @return the record that was added
     * @throws SystemException if a system exception occurred
     */
    @Indexable(type = IndexableType.REINDEX)
    @Override
    public Record addRecord(Record record) throws SystemException {
        record.setNew(true);

        return recordPersistence.update(record);
    }

    /**
     * Creates a new record with the primary key. Does not add the record to the database.
     *
     * @param recordId the primary key for the new record
     * @return the new record
     */
    @Override
    public Record createRecord(long recordId) {
        return recordPersistence.create(recordId);
    }

    /**
     * Deletes the record with the primary key from the database. Also notifies the appropriate model listeners.
     *
     * @param recordId the primary key of the record
     * @return the record that was removed
     * @throws PortalException if a record with the primary key could not be found
     * @throws SystemException if a system exception occurred
     */
    @Indexable(type = IndexableType.DELETE)
    @Override
    public Record deleteRecord(long recordId)
        throws PortalException, SystemException {
        return recordPersistence.remove(recordId);
    }

    /**
     * Deletes the record from the database. Also notifies the appropriate model listeners.
     *
     * @param record the record
     * @return the record that was removed
     * @throws SystemException if a system exception occurred
     */
    @Indexable(type = IndexableType.DELETE)
    @Override
    public Record deleteRecord(Record record) throws SystemException {
        return recordPersistence.remove(record);
    }

    @Override
    public DynamicQuery dynamicQuery() {
        Class<?> clazz = getClass();

        return DynamicQueryFactoryUtil.forClass(Record.class,
            clazz.getClassLoader());
    }

    /**
     * Performs a dynamic query on the database and returns the matching rows.
     *
     * @param dynamicQuery the dynamic query
     * @return the matching rows
     * @throws SystemException if a system exception occurred
     */
    @Override
    @SuppressWarnings("rawtypes")
    public List dynamicQuery(DynamicQuery dynamicQuery)
        throws SystemException {
        return recordPersistence.findWithDynamicQuery(dynamicQuery);
    }

    /**
     * Performs a dynamic query on the database and returns a range of the matching rows.
     *
     * <p>
     * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.nam.srv42.model.impl.RecordModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
     * </p>
     *
     * @param dynamicQuery the dynamic query
     * @param start the lower bound of the range of model instances
     * @param end the upper bound of the range of model instances (not inclusive)
     * @return the range of matching rows
     * @throws SystemException if a system exception occurred
     */
    @Override
    @SuppressWarnings("rawtypes")
    public List dynamicQuery(DynamicQuery dynamicQuery, int start, int end)
        throws SystemException {
        return recordPersistence.findWithDynamicQuery(dynamicQuery, start, end);
    }

    /**
     * Performs a dynamic query on the database and returns an ordered range of the matching rows.
     *
     * <p>
     * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.nam.srv42.model.impl.RecordModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
     * </p>
     *
     * @param dynamicQuery the dynamic query
     * @param start the lower bound of the range of model instances
     * @param end the upper bound of the range of model instances (not inclusive)
     * @param orderByComparator the comparator to order the results by (optionally <code>null</code>)
     * @return the ordered range of matching rows
     * @throws SystemException if a system exception occurred
     */
    @Override
    @SuppressWarnings("rawtypes")
    public List dynamicQuery(DynamicQuery dynamicQuery, int start, int end,
        OrderByComparator orderByComparator) throws SystemException {
        return recordPersistence.findWithDynamicQuery(dynamicQuery, start, end,
            orderByComparator);
    }

    /**
     * Returns the number of rows that match the dynamic query.
     *
     * @param dynamicQuery the dynamic query
     * @return the number of rows that match the dynamic query
     * @throws SystemException if a system exception occurred
     */
    @Override
    public long dynamicQueryCount(DynamicQuery dynamicQuery)
        throws SystemException {
        return recordPersistence.countWithDynamicQuery(dynamicQuery);
    }

    /**
     * Returns the number of rows that match the dynamic query.
     *
     * @param dynamicQuery the dynamic query
     * @param projection the projection to apply to the query
     * @return the number of rows that match the dynamic query
     * @throws SystemException if a system exception occurred
     */
    @Override
    public long dynamicQueryCount(DynamicQuery dynamicQuery,
        Projection projection) throws SystemException {
        return recordPersistence.countWithDynamicQuery(dynamicQuery, projection);
    }

    @Override
    public Record fetchRecord(long recordId) throws SystemException {
        return recordPersistence.fetchByPrimaryKey(recordId);
    }

    /**
     * Returns the record with the matching UUID and company.
     *
     * @param uuid the record's UUID
     * @param  companyId the primary key of the company
     * @return the matching record, or <code>null</code> if a matching record could not be found
     * @throws SystemException if a system exception occurred
     */
    @Override
    public Record fetchRecordByUuidAndCompanyId(String uuid, long companyId)
        throws SystemException {
        return recordPersistence.fetchByUuid_C_First(uuid, companyId, null);
    }

    /**
     * Returns the record matching the UUID and group.
     *
     * @param uuid the record's UUID
     * @param groupId the primary key of the group
     * @return the matching record, or <code>null</code> if a matching record could not be found
     * @throws SystemException if a system exception occurred
     */
    @Override
    public Record fetchRecordByUuidAndGroupId(String uuid, long groupId)
        throws SystemException {
        return recordPersistence.fetchByUUID_G(uuid, groupId);
    }

    /**
     * Returns the record with the primary key.
     *
     * @param recordId the primary key of the record
     * @return the record
     * @throws PortalException if a record with the primary key could not be found
     * @throws SystemException if a system exception occurred
     */
    @Override
    public Record getRecord(long recordId)
        throws PortalException, SystemException {
        return recordPersistence.findByPrimaryKey(recordId);
    }

    @Override
    public PersistedModel getPersistedModel(Serializable primaryKeyObj)
        throws PortalException, SystemException {
        return recordPersistence.findByPrimaryKey(primaryKeyObj);
    }

    /**
     * Returns the record with the matching UUID and company.
     *
     * @param uuid the record's UUID
     * @param  companyId the primary key of the company
     * @return the matching record
     * @throws PortalException if a matching record could not be found
     * @throws SystemException if a system exception occurred
     */
    @Override
    public Record getRecordByUuidAndCompanyId(String uuid, long companyId)
        throws PortalException, SystemException {
        return recordPersistence.findByUuid_C_First(uuid, companyId, null);
    }

    /**
     * Returns the record matching the UUID and group.
     *
     * @param uuid the record's UUID
     * @param groupId the primary key of the group
     * @return the matching record
     * @throws PortalException if a matching record could not be found
     * @throws SystemException if a system exception occurred
     */
    @Override
    public Record getRecordByUuidAndGroupId(String uuid, long groupId)
        throws PortalException, SystemException {
        return recordPersistence.findByUUID_G(uuid, groupId);
    }

    /**
     * Returns a range of all the records.
     *
     * <p>
     * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.nam.srv42.model.impl.RecordModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
     * </p>
     *
     * @param start the lower bound of the range of records
     * @param end the upper bound of the range of records (not inclusive)
     * @return the range of records
     * @throws SystemException if a system exception occurred
     */
    @Override
    public List<Record> getRecords(int start, int end)
        throws SystemException {
        return recordPersistence.findAll(start, end);
    }

    /**
     * Returns the number of records.
     *
     * @return the number of records
     * @throws SystemException if a system exception occurred
     */
    @Override
    public int getRecordsCount() throws SystemException {
        return recordPersistence.countAll();
    }

    /**
     * Updates the record in the database or adds it if it does not yet exist. Also notifies the appropriate model listeners.
     *
     * @param record the record
     * @return the record that was updated
     * @throws SystemException if a system exception occurred
     */
    @Indexable(type = IndexableType.REINDEX)
    @Override
    public Record updateRecord(Record record) throws SystemException {
        return recordPersistence.update(record);
    }

    /**
     * Returns the record local service.
     *
     * @return the record local service
     */
    public com.nam.srv42.service.RecordLocalService getRecordLocalService() {
        return recordLocalService;
    }

    /**
     * Sets the record local service.
     *
     * @param recordLocalService the record local service
     */
    public void setRecordLocalService(
        com.nam.srv42.service.RecordLocalService recordLocalService) {
        this.recordLocalService = recordLocalService;
    }

    /**
     * Returns the record persistence.
     *
     * @return the record persistence
     */
    public RecordPersistence getRecordPersistence() {
        return recordPersistence;
    }

    /**
     * Sets the record persistence.
     *
     * @param recordPersistence the record persistence
     */
    public void setRecordPersistence(RecordPersistence recordPersistence) {
        this.recordPersistence = recordPersistence;
    }

    /**
     * Returns the counter local service.
     *
     * @return the counter local service
     */
    public com.liferay.counter.service.CounterLocalService getCounterLocalService() {
        return counterLocalService;
    }

    /**
     * Sets the counter local service.
     *
     * @param counterLocalService the counter local service
     */
    public void setCounterLocalService(
        com.liferay.counter.service.CounterLocalService counterLocalService) {
        this.counterLocalService = counterLocalService;
    }

    /**
     * Returns the resource local service.
     *
     * @return the resource local service
     */
    public com.liferay.portal.service.ResourceLocalService getResourceLocalService() {
        return resourceLocalService;
    }

    /**
     * Sets the resource local service.
     *
     * @param resourceLocalService the resource local service
     */
    public void setResourceLocalService(
        com.liferay.portal.service.ResourceLocalService resourceLocalService) {
        this.resourceLocalService = resourceLocalService;
    }

    /**
     * Returns the user local service.
     *
     * @return the user local service
     */
    public com.liferay.portal.service.UserLocalService getUserLocalService() {
        return userLocalService;
    }

    /**
     * Sets the user local service.
     *
     * @param userLocalService the user local service
     */
    public void setUserLocalService(
        com.liferay.portal.service.UserLocalService userLocalService) {
        this.userLocalService = userLocalService;
    }

    /**
     * Returns the user remote service.
     *
     * @return the user remote service
     */
    public com.liferay.portal.service.UserService getUserService() {
        return userService;
    }

    /**
     * Sets the user remote service.
     *
     * @param userService the user remote service
     */
    public void setUserService(
        com.liferay.portal.service.UserService userService) {
        this.userService = userService;
    }

    /**
     * Returns the user persistence.
     *
     * @return the user persistence
     */
    public UserPersistence getUserPersistence() {
        return userPersistence;
    }

    /**
     * Sets the user persistence.
     *
     * @param userPersistence the user persistence
     */
    public void setUserPersistence(UserPersistence userPersistence) {
        this.userPersistence = userPersistence;
    }

    public void afterPropertiesSet() {
        Class<?> clazz = getClass();

        _classLoader = clazz.getClassLoader();

        PersistedModelLocalServiceRegistryUtil.register("com.nam.srv42.model.Record",
            recordLocalService);
    }

    public void destroy() {
        PersistedModelLocalServiceRegistryUtil.unregister(
            "com.nam.srv42.model.Record");
    }

    /**
     * Returns the Spring bean ID for this bean.
     *
     * @return the Spring bean ID for this bean
     */
    @Override
    public String getBeanIdentifier() {
        return _beanIdentifier;
    }

    /**
     * Sets the Spring bean ID for this bean.
     *
     * @param beanIdentifier the Spring bean ID for this bean
     */
    @Override
    public void setBeanIdentifier(String beanIdentifier) {
        _beanIdentifier = beanIdentifier;
    }

    @Override
    public Object invokeMethod(String name, String[] parameterTypes,
        Object[] arguments) throws Throwable {
        Thread currentThread = Thread.currentThread();

        ClassLoader contextClassLoader = currentThread.getContextClassLoader();

        if (contextClassLoader != _classLoader) {
            currentThread.setContextClassLoader(_classLoader);
        }

        try {
            return _clpInvoker.invokeMethod(name, parameterTypes, arguments);
        } finally {
            if (contextClassLoader != _classLoader) {
                currentThread.setContextClassLoader(contextClassLoader);
            }
        }
    }

    protected Class<?> getModelClass() {
        return Record.class;
    }

    protected String getModelClassName() {
        return Record.class.getName();
    }

    /**
     * Performs an SQL query.
     *
     * @param sql the sql query
     */
    protected void runSQL(String sql) throws SystemException {
        try {
            DataSource dataSource = recordPersistence.getDataSource();

            SqlUpdate sqlUpdate = SqlUpdateFactoryUtil.getSqlUpdate(dataSource,
                    sql, new int[0]);

            sqlUpdate.update();
        } catch (Exception e) {
            throw new SystemException(e);
        }
    }
}
